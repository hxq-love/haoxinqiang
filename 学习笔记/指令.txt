+Vue 指令：
安装：cnpm install vue

安装vue-cli脚手架
cnpm install --global vue-cli

创建一个webpack模板
vue init -webpack 项目名


git 指令

创建本地仓库
git init

查看仓库状态
git status 

将文件存到暂存区
git add .

将文件添加到仓库
git commit -m '描述信息'

将本地仓库与远程仓库连接
git remote add origin 远程仓库地址


将本地代码提交到仓库
git push -u origin master


vue.js 
父组件给子组件传值：通过属性
<v-li :name="123" :add="add" :obj="this"></v-li>---子组件
子组件：通过props:["name","add","obj"]  来获取值、方法、整个this对象

父组件主动获取子组件值和方法
<v-li ref="aa"></v-li>---子组件
this.$refs.aa.值  this.$refs.aa.方法

this.$parent.值 this.$parent.方法

兄弟组件互相获取值和方法
新建公用JS，声明全局Vue实例，在个组件中通过import引用
获取值、方法：import 名称 from '../model/VueSiblings'
名称.$emit('v-value',123)
名称.$on('v-value',(data)=>){
	
}


vue router路由
普通路由：<router-link to="/one"></router-link>  routes:[{path:'/one',component:组件名}]
动态路由 <router-link to="/one/123"></router-link> routes:[{path:'/one/:id',component:组件名}]  this.$route.params.id
	<router-link to="/one/123/234"></router-link> routes:[{path:'/one/:id/:name',component:组件名}]
动态路由get传值 <router-link :to="'/one?id='+id"></router-link>  routes:[{path:'/one',component:组件名}]  this.$route.query.id
编程时路由  routes:[{path:'/one/:id',component:组件名}]  方法：this.$router.push({path:'/one/123'})
	    通过name动态路由 this.$router.push({name:'one',params:{id:123}})  routes:[{path:'/one',component:组件名},name:'one']



Vue生命周期：
Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、销毁等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。

每一个组件或者实例都会经历一个完整的生命周期，总共分为三个阶段：初始化、运行中、销毁。

    实例、组件通过new Vue() 创建出来之后会初始化事件和生命周期，然后就会执行beforeCreate钩子函数，这个时候，数据还没有挂载呢，只是一个空壳，无法访问到数据和真实的dom，一般不做操作

    挂载数据，绑定事件等等，然后执行created函数，这个时候已经可以使用到数据，也可以更改数据,在这里更改数据不会触发updated函数，在这里可以在渲染前倒数第二次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取

    接下来开始找实例或者组件对应的模板，编译模板为虚拟dom放入到render函数中准备渲染，然后执行beforeMount钩子函数，在这个函数中虚拟dom已经创建完成，马上就要渲染,在这里也可以更改数据，不会触发updated，在这里可以在渲染前最后一次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取

    接下来开始render，渲染出真实dom，然后执行mounted钩子函数，此时，组件已经出现在页面中，数据、真实dom都已经处理好了,事件都已经挂载好了，可以在这里操作真实dom等事情...

    当组件或实例的数据更改之后，会立即执行beforeUpdate，然后vue的虚拟dom机制会重新构建虚拟dom与上一次的虚拟dom树利用diff算法进行对比之后重新渲染，一般不做什么事儿

    当更新完成后，执行updated，数据已经更改完成，dom也重新render完成，可以操作更新后的虚拟dom

    当经过某种途径调用$destroy方法后，立即执行beforeDestroy，一般在这里做一些善后工作，例如清除计时器、清除非指令绑定的事件等等

    组件的数据绑定、监听...去掉后只剩下dom空壳，这个时候，执行destroyed，在这里做善后工作也可以


Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式


    1.vuex解决了组件之间同一状态的共享问题  （解决了不同组件之间的数据共享）

    2.组件里面数据的持久化。                

   小项目不部建议用vuex   
/*1.state在vuex中用于存储数据*/
			var state={

			    count:1
			}
定义方法	 mutations里面放的是方法，方法主要用于改变state里面的数据

		var mutations={

		    incCount(){

			++state.count;
		    }
		}
暴露

		const store = new Vuex.Store({
		    state,
		    mutations
		})
		
		export default store;

1.引入 store

			 import store from '../vuex/store.js';


		2、注册

			 export default{
				data(){
				    return {               
				       msg:'我是一个home组件',
					value1: null,
				     
				    }
				},
				store,
				methods:{
				    incCount(){
				      
					this.$store.commit('incCount');   /*触发 state里面的数据*/
				    }

				}
			    }
		3、获取state里面的数据  

			this.$store.state.数据



		4、触发 mutations 改变 state里面的数据
			
			this.$store.commit('incCount');
		5.优点类似计算属性   ，  改变state里面的count数据的时候会触发 getters里面的方法 获取新的值 (基本用不到)


		var getters= {
		   
		    computedCount: (state) => {
			return state.count*2
		    }
		}
this.$store.getters.computedCount

		6、 Action 基本没有用

		Action 类似于 mutation，不同在于：

		Action 提交的是 mutation，而不是直接变更状态。
		Action 可以包含任意异步操作。
		


		var actions= {
		    incMutationsCount(context) {    /*因此你可以调用 context.commit 提交一个 mutation*/
		      
		      
			context.commit('incCount');    /*执行 mutations 里面的incCount方法 改变state里面的数据*/


		    }
		}
this.$store.dispatch('incMutationsCount')

// 注册一个全局自定义指令 `v-focus`
Vue.directive('focus', {
  // 当被绑定的元素插入到 DOM 中时……
  inserted: function (el) {
    // 聚焦元素
    el.focus()
  }
})
如果想注册局部指令，组件中也接受一个 directives 的选项：

directives: {
  focus: {
    // 指令的定义
    inserted: function (el) {
      el.focus()
    }
  }
}